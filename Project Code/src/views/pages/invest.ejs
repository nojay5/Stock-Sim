
<%- include ('../partials/menu') %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Chart Example</title>
    <!-- Include the Chart.js library -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background-color: black;
            color: #ffffff;
            font-family: 'Arial', sans-serif;
        }

        h1 {
            color: #05A914;
            font-weight: 800;
            font-family: 'Arial', sans-serif;
                
        }

        #buyButton {
            background-color: #009900;
            color: #ffffff;
            padding: 10px 20px;
            margin-right: 5px;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }

        #sellButton {
            background-color: #cc0000;
            color: #ffffff;
            padding: 10px 20px;
            margin-right: 5px;
            border: none;
            cursor: not-allowed;
            font-size: 16px;
        }

        #iterateButton {
            background-color: #0c0cd0;
            color: #ffffff;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            
        }
        #simulateButton{
            background-color: #f6d30e;
            color: #ffffff;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            color: #333333;
        }

        #openPriceData {
            margin-top: 10px;
        }

       
        input[type="range"] {
            width: 200px; /* Adjust the width as needed */
        }

        #graph-caption {
        position: absolute;
        top: 100px; /* Adjust the top distance as needed */
        left: 820px; /* Adjust the right distance as needed */
        color: #00cc00;
        font-size: 24px;
        }
        #buyPrice {
        position: absolute;
        top: 125px; /* Adjust the top distance as needed */
        left: 820px; /* Adjust the right distance as needed */
        color: #00cc00;
        font-size: 24px;
        }
        #sellPrice {
        position: absolute;
        top: 150px; /* Adjust the top distance as needed */
        left: 820px; /* Adjust the right distance as needed */
        color: #cc0000;
        font-size: 24px;
        }
        #shareAmount {
            position: absolute;
            top: 175px; /* Adjust the top distance as needed */
            left: 820px; /* Adjust the right distance as needed */
            color: #00cc00;
            font-size: 20px;
        }
        .select-container {
            position: absolute;
            top: 200px; /* Adjust the top distance as needed */
            left: 820px; /* Adjust the right distance as needed */
            color: blue;
            font-size: 20px;
        }
        #currentPrice{
            position: absolute;
            top: 225px; /* Adjust the top distance as needed */
            left: 820px; /* Adjust the right distance as needed */
            color: blanchedalmond;
            font-size: 20px;
        }
        #gainLoss{
            position: absolute;
            top: 250px; /* Adjust the top distance as needed */
            left: 820px; /* Adjust the right distance as needed */
            color: blanchedalmond;
            font-size: 20px;
        }
        .stockChartDiv{
            background-color: #333333;
        }
    </style>
     <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"> -->
</head>
<body>
    <h1>Stock Chart - <%= stockSymbol %></h1>

    <div class = "stockChartDiv">
    <canvas id="stockChart" width="800" height="400"></canvas>
    <div id="graph-caption"></div>
    <div id="buyPrice">Buy price: 0</div>
    <div id="sellPrice">Sell price: 0</div>
    <div id="shareAmount">Total Shares: 0</div>

    
    <div id="openPriceData"></div>
    
    
    <button id="buyButton">BUY</button>
    <button id="sellButton">SELL</button>
    <button id="iterateButton">ITERATE</button>
    <button id="simulateButton">SIMULATE</button>
    <div id="outputContainer">
        <!-- Value will be displayed here -->
    </div>
    <div id="currentPrice">Current Price: 0</div>
    <div id="gainLoss">Gain/Loss: 0%</div>

    <div class="slider-container">
        <input type="range" id="slider" min="1" max="50" value="1" step="1">
        <p id="sliderValue">0</p>
    </div>

    <div class="select-container">
        <label for="quantitySelector">Quantity:</label>
        <select id="quantitySelector">
            <option value="1">1</option>
            <option value="5">5</option>
            <option value="25">25</option>
            <option value="100">100</option>
            <option value="1000">1000</option>
            <option value="max">MAX</option>
        </select>
    </div>
</div>
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container-fluid">
            <!-- Navbar brand -->
            <a class="navbar-brand" href="#">Stock App</a>

            <!-- Navbar toggle button for smaller screens -->
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <!-- Search bar -->
            <div class="collapse navbar-collapse" id="navbarNav">
                <div class="d-flex ms-auto">
                    <input class="form-control me-2" type="search" placeholder="Enter stock symbol" aria-label="Search" id="stockSymbol">
                    <button class="btn btn-outline-success" type="submit" onclick="getNewStock()">Search</button>
                </div>

            <script>
                function getNewStock() {
                    let stockSymbolDiv = document.getElementById("stockSymbol")
                    window.location = location.origin + window.location.pathname + `?stockSymbol=${stockSymbolDiv.value}`
                }
            </script>
            </div>
        </div>
    </nav>


    <!-- Example stock data (replace with your actual data) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentIndex = 0;
        let currentAmount = 1000000;
        let shares = 0;
        let buyIndex;
        let sellIndex;
        let step = 1;
        let numShares = 1;

        // Get the output element
        const quantitySelector = document.getElementById("quantitySelector").value;
        const slider = document.getElementById("slider");
        const sliderValue = document.getElementById("sliderValue");

        // Display the default value on page load
        sliderValue.innerHTML = slider.value;

        // Update the displayed value as the slider is moved
        slider.addEventListener("input", function() {
            sliderValue.innerHTML = this.value;
            step = parseInt(this.value);
            updateChart();
        });


        /*
            This function calls /user_balance. Put 'graph-caption' whereever you want to display user balance.
            I started by putting it in this chunk of code:
                
                <h1>Stock Chart - <%= stockSymbol %></h1>
                <div class = "stockChartDiv">
                <canvas id="stockChart" width="800" height="400"></canvas>
                <div id="graph-caption"></div>
                <div id="buyPrice">Buy price: 0</div>
                <div id="sellPrice">Sell price: 0</div>
                <div id="shareAmount">Total Shares: 0</div>

            The page now displays the current user sessions balance.
        */
        async function updateBalance() {
            try {
                const response = await fetch('/user_balance');
                const balance = await response.json();
                
                // Format the balance with commas and a dollar sign
                const formattedBalance = `$${balance.toLocaleString()}`;

                // Update the content of the div
                document.getElementById('graph-caption').textContent = formattedBalance;
            } catch (error) {
                console.error('Error fetching balance:', error);
                // Handle errors as needed
            }
        }
        updateBalance();

        /* NOAH THIS FETCH API SHOULD CALL /transactShares and update our DB
            you will insert into:
                        shares: 
                        price: 
                        date: 
                        type: 
                        stock_name:
            this will send the data you give to the API endpoint and our DB
            


        // const response = await fetch('/transactShares', {
        //     method: 'POST',
        //     headers: {
        //         'Content-Type': 'application/json',
        //     },
        //     body: JSON.stringify({
        //         shares: 
        //         price: 
        //         date: 
        //         type: 
        //         stock_name: 
        //     }),
        //     });

        //     if (!response.ok) {
        //         throw new Error('Unable to complete the transaction');
        //     }

        END FETCH CALL*/

        document.body.addEventListener('submit', function(event) {
            if (event.target.id === 'stockForm') {
                event.preventDefault(); // Prevent the form from submitting traditionally

                // Get the entered stock symbol
                stockSymbol = document.getElementById('stockInput').value;

                // Use the stockSymbol as needed (e.g., update the chart title)
                document.getElementById('stockChartTitle').innerText = `Stock Chart - ${stockSymbol}`;
            }
        });

        function iterateAndDisplay() {
            // Increment the index for the next click
            currentIndex = (currentIndex + step) % stockCandleData.openPrices.length;

            // Update the labels and data for the chart
            const labels = stockCandleData.timestamps
                .slice(0, currentIndex + 1)
                .map(timestamp => new Date(timestamp).toLocaleDateString());

            const data = stockCandleData.openPrices.slice(0, currentIndex + 1);

            // Display the current value
            document.getElementById('outputContainer').innerHTML = `
                <p>Open Price: ${stockCandleData.openPrices[currentIndex]}</p>
                <p>Time Stamp: ${new Date(stockCandleData.timestamps[currentIndex]).toLocaleString()}</p>
                <p>Iterator Count: ${currentIndex}</p>
            `;

            // Update the chart with the new data
            stockChart.data.labels = labels;
            stockChart.data.datasets[0].data = data;
            stockChart.update();
            updatePriceAndGainLoss();
        }

        

        function buyShares() {
            // Moved the declaration inside the function
            const quantitySelector = document.getElementById("quantitySelector").value;

            buyIndex = currentIndex;
            if ((currentAmount - shares * stockCandleData.openPrices[buyIndex]) > 0) {
                if (quantitySelector.toLowerCase() === "max") {
                    numShares = Math.floor(currentAmount / stockCandleData.openPrices[buyIndex]);
                } else {
                    numShares = Math.min(parseInt(quantitySelector), Math.floor(currentAmount / stockCandleData.openPrices[buyIndex]));
                }

                shares += numShares;
                currentAmount -= numShares * stockCandleData.openPrices[buyIndex];
            }

            // Ensure the value doesn't go negative
            currentAmount = Math.max(currentAmount, 0);

            // Make POST request to DB

            const formattedAmount = currentAmount.toLocaleString();
            document.getElementById('graph-caption').innerText = `$${formattedAmount}`;
            document.getElementById('buyPrice').innerText = `Buy price: ${stockCandleData.openPrices[currentIndex].toFixed(2)}`;
            document.getElementById('shareAmount').innerText = `Total Shares: ${shares}`;
            updatePriceAndGainLoss();
        }

        function sellShares() {
            // Moved the declaration inside the function
            const quantitySelector = document.getElementById("quantitySelector").value;

            sellIndex = currentIndex;
            if (shares > 0) {
                if (quantitySelector.toLowerCase() === "max") {
                    numShares = shares;
                } else {
                    numShares = Math.min(parseInt(quantitySelector), shares);
                }

                currentAmount += numShares * stockCandleData.openPrices[sellIndex];
                shares -= numShares;
            }

            // Ensure the value doesn't go negative
            currentAmount = Math.max(currentAmount, 0);

            const formattedAmount = currentAmount.toLocaleString();
            document.getElementById('graph-caption').innerText = `$${formattedAmount}`;
            document.getElementById('sellPrice').innerText = `Sell Price: ${stockCandleData.openPrices[currentIndex].toFixed(2)}`;
            document.getElementById('shareAmount').innerText = `Total Shares: ${shares}`;
            updatePriceAndGainLoss();
        }

        function updatePriceAndGainLoss() {
            const currentPrice = stockCandleData.openPrices[currentIndex];
            const buyPrice = stockCandleData.openPrices[buyIndex];

            // Calculate gain/loss percentage
            const gainLossPercentage = ((currentPrice - buyPrice) / buyPrice) * 100;
            const formattedGainLoss = gainLossPercentage.toFixed(2);

            // Display current price
            document.getElementById('currentPrice').innerText = `Current Price: ${currentPrice.toFixed(2)}`;

            // Display gain/loss with color based on positivity/negativity
            const gainLossElement = document.getElementById('gainLoss');
            gainLossElement.innerText = `Gain/Loss: ${formattedGainLoss}%`;

            // Set color based on gain or loss
            if (gainLossPercentage > 0) {
                gainLossElement.style.color = '#00cc00'; // Green for gain
            } else if (gainLossPercentage < 0) {
                gainLossElement.style.color = '#cc0000'; // Red for loss
            } else {
                gainLossElement.style.color = ''; // Default color if no gain or loss
            }
        }

    document.getElementById('iterateButton').addEventListener('click', function () {
        iterateOrSimulate(false);
    });

    document.getElementById('simulateButton').addEventListener('click', function () {
        iterateOrSimulate(true);
    });

    function iterateOrSimulate(isSimulation) {
        const iterations = isSimulation ? parseInt(slider.value) : 1;

        function performStep(i) {
            currentIndex = (currentIndex + 1) % stockCandleData.openPrices.length;

            // Update the labels and data for the chart
            const labels = stockCandleData.timestamps
                .slice(0, currentIndex + 1)
                .map(timestamp => new Date(timestamp).toLocaleDateString());

            const data = stockCandleData.openPrices.slice(0, currentIndex + 1);

            // Display the current value
            document.getElementById('outputContainer').innerHTML = `
                <p>Open Price: ${stockCandleData.openPrices[currentIndex]}</p>
                <p>Time Stamp: ${new Date(stockCandleData.timestamps[currentIndex]).toLocaleString()}</p>
                <p>Iterator Count: ${currentIndex}</p>
            `;

            // Update the chart with the new data
            stockChart.data.labels = labels;
            stockChart.data.datasets[0].data = data;
            stockChart.update();
            updatePriceAndGainLoss();

            // Continue to the next step if not the last iteration
            if (i < iterations - 1) {
                setTimeout(function () {
                    performStep(i + 1);
                }, isSimulation ? 700 : 0);
            }
        }

        // Start the iteration or simulation
        performStep(0);
    }

    // Add this line to call the function after updating the chart
        

        // Add click event listener to the button
        document.getElementById('iterateButton').addEventListener('click', iterateAndDisplay);
        document.getElementById('buyButton').addEventListener('click', () => {buyShares();});
        document.getElementById('sellButton').addEventListener('click', () => {sellShares();});

        
        const stockCandleData = {
            openPrices: <%= JSON.stringify(stockCandleData.openPrices) %>,
            // closePrices: <%= JSON.stringify(stockCandleData.closePrices) %>,
            timestamps: <%= JSON.stringify(stockCandleData.timestamps) %>,
        };

        function createStockChart() {
            const ctx = document.getElementById('stockChart').getContext('2d');
            const stockChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: stockCandleData.timestamps.map(timestamp => new Date(timestamp).toLocaleDateString()),
                    datasets: [{
                        label: 'Open Prices',
                        data: stockCandleData.openPrices,
                        borderColor: 'rgba(255, 99, 132, 1)', // Default color
                        borderWidth: 2,
                        fill: false,
                        pointBorderColor: (context) => {
                            const index = context.dataIndex;
                            if (index === currentIndex) {return '#cc0000';}
                            else if (buyIndex !== undefined && index === buyIndex) {return '#00cc00';}
                            else {return 'rgba(255, 99, 132, 1)';}
                        },
                        pointBackgroundColor: 'rgba(255, 99, 132, 0)', // Transparent fill
                        pointRadius: (context) => {
                            const index = context.dataIndex;
                            return index === currentIndex || index === buyIndex ? 5 : 0;
                        },
                        pointHoverRadius: (context) => {
                            const index = context.dataIndex;
                            return index === currentIndex || index === buyIndex ? 8 : 0;
                        },
                    }],
                },
                options: {
                    responsive: false,
                    maintainAspectRatio: false,
                    scales: {
                        xAxes: [{
                            type: 'linear',
                            position: 'bottom',
                            ticks: {
                                autoSkip: true,
                                maxTicksLimit: 10,
                            },
                        }],
                    },
                    animation: false,
                    elements: {
                        line: {
                            tension: 0
                        }
                    }
                },
            });
            return stockChart;
        }

        function updateChart() {
            if (stockChart) {stockChart.destroy();}
            stockChart = createStockChart();
        }
        let stockChart = createStockChart();
        
    </script>
</body>
</html>

<%- include ('../partials/footer') %>
